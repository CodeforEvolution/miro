Just some notes for now: not tested on a virgin machine, not
necessarily complete, and not tested with compilers other than Visual
C++. You are largely on your own.

1) Install Python 2.4.x:
     http://www.python.org/download/

2) Install dependencies:
     * An appropriate compiler, configured so that Python distutils can
       find it and successfully build extensions with it. I use
       Visual Studio .NET 2003; for information about free alternatives, see:
         http://www.vrplumber.com/programming/mstoolkit/
     * Mark Hammonds's Python for Windows Extensions ('pywin32' aka 'win32all'):
         http://sourceforge.net/project/showfiles.php?group_id=78018
     * ctypes (in the future we will probably require pywin32 *or* ctypes,
       not both):
         http://sourceforge.net/project/showfiles.php?group_id=71702
     * Pyrex:
         http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/
     * Py2exe:
         http://starship.python.net/crew/theller/py2exe/
     * Mozilla GRE and GRE SDK (and set paths in platform/windows/setup.py)
     * simplevlc.dll/simplevlc.h from inside KCEasy?
     * Probably some other things I am forgetting

2) Get the Mozilla Gecko Runtime Engine (GRE) and a matching GRE SDK. You
   have two options:
     * Prebuilt GRE and GRE SDK. Get the GRE at
         http://ftp.mozilla.org/pub/mozilla.org/mozilla/releases/mozilla1.7.8/windows-xpi/gre-win32-installer.zip
       and run it. Get 
         http://ftp.mozilla.org/pub/mozilla.org/mozilla/releases/mozilla1.7.8/gecko-sdk-i586-pc-msvc-1.7.8.zip 
       and unzip it to the directory of your choosing.
     * Download and build Mozilla per the instructions at mozilla.org. This
       could be to your great advantage for debugging The GRE SDK will be in
       '$OBJDIR/dist/sdk' and the GRE itself in '$OBJDIR/dist/sdk'. However,
       I get weird errors halfway through initialization when I do this,
       suggesting that the component registry isn't being initialized
       correctly. Creating an empty platform/windows/dist/components directory
       after building DTV, and/or running Mozilla's regxpcom in the right 
       location, will suppress some of the messages but not fix the underlying
       issue.

3) Get and install Boost and Boost.Python following the instructions at:
     http://www.boost.org/more/getting_started.html
     and/or http://www.boost.org/libs/python/doc/building.html

   Here is the short form if you are using Visual C++ .NET 2003:
     * Get the boost-jam build tool from:
         http://prdownloads.sourceforge.net/boost/boost-jam-3.1.11-1-ntx86.zip?download         
       This archive contains bjam.exe and a readme. Put bjam.exe somewhere
       in your path.
     * Get the Boost source:
         http://prdownloads.sourceforge.net/boost/boost_1_33_0.exe?download
     * Choose "Visual Studio .NET 2003 Command Prompt" option from Start
       Menu, or run VCVARS32.BAT/VSVARS32.BAT in an existing shell.
     * In the directory where you unpacked the source, run:
         bjam "-sTOOLS=vc-7_1" "-sPYTHON_VERSION=<major>.<minor>" install
           --with-python-root=<Python install root>
       For example:
         bjam "-sTOOLS=vc-7_1" "-sPYTHON_VERSION=2.4" install
           --with-python-root=c:\Python2.4
       This takes quite a long time.
     * This creates a directory c:\Boost containing a build of Boost with
       Python support.
    
4) Edit platform/windows/setup.py. Set the paths to Boost and the GRE and
   GRE SDK. If you installed a prebuild GRE, you'll probably have to dig
   around underneath C:\Program Files\Common Files\mozilla.org and figure
   out where the installer put it. If you have several GREs on your system,
   make absolutely sure that the GRE and the GRE SDK you pick are of matching
   versions. Read the special instructions in setup.py about hardcoding GRE
   paths.

5) cd to platform/windows. Run:
     python setup.py py2exe

6) If all went well, a directory platform/windows/dist was created, containing
   DTV.exe and a number of other files and directories. This is DTV. All of
   the other files in 'dist' are required and should stay in the same directory
   as DTV.exe.

   The only other runtime requirement is a compatible version of the GRE.
   We will probably end up bundling the GRE directly into the dist directory
   because we use some unfrozen XPCOM interfaces that are necessary for
   browser embedding and don't want to take any chances.

   Important note: if you edit any of the header files in the MozillaBrowser
   directory, particularly the class declarations, you will need to delete
   the platform/windows/build directory, or the results are unpredictable.
   distutils does not compute dependencies correctly; this is your only
   warning.