#include "nsISupports.idl"

interface nsIDOMWindow;
interface nsIDOMDocument;
interface nsICommandLine;

[scriptable, uuid(8ABB2E1D-6624-4457-A4BD-EBFA6156D426)]
interface pcfIDTVPyBridge : nsISupports
{
  /**
   * Called on application startup.
   */
  AString getStartupError();
  void onStartup(in nsIDOMWindow window);
  void onShutdown();
  void handleCommandLine(in nsICommandLine commandLine);
  void pageLoadFinished(in AString area, in AString url);
  void performSearch(in AString engine, in AString query);
  void setVolume(in float volume);
  void quit();
  void removeCurrentChannel();
  void updateCurrentChannel();
  void updateChannels();
  void showHelp();
  void addChannel();
  void copyChannelLink();
  void handleContextMenu(in unsigned long index);
  void handleSimpleDialog(in unsigned long id, 
        in unsigned short buttonIndex);
  void handleHTTPAuthDialog(in unsigned long id, 
          in unsigned short buttonIndex, in AString username, 
          in AString password);
  void handleTextEntryDialog(in unsigned long id, 
        in unsigned short buttonIndex, in AString text);
  void handleSearchChannelDialog(in unsigned long id, 
        in unsigned short buttonIndex, in AString term,
        in unsigned short style, in AString loc);
  void openURL(in AString url);
  void loadURLInBrowser(in AString browserAreaId, in AString url);
  void skip(in short step);
  void skipPrevious();
  void onMovieFinished();
  void stop();
  void playPause();
  void openFile(in AString path);
  void deleteVLCCache();
  AString shortenDirectoryName(in AString path);
  boolean getRunAtStartup();
  void setRunAtStartup(in boolean value);
  short getCheckEvery();
  void setCheckEvery(in short value);
  AString getMoviesDirectory();
  void changeMoviesDirectory(in AString path, in boolean migrate);
  boolean getLimitUpstream();
  void setLimitUpstream(in boolean value);
  short getLimitUpstreamAmount();
  void setLimitUpstreamAmount(in short value);
  short getMaxManual();
  void setMaxManual(in short value);
  void startPrefs();
  void updatePrefs();
  boolean getPreserveDiskSpace();
  void setPreserveDiskSpace(in boolean value);
  float getPreserveDiskSpaceAmount();
  void setPreserveDiskSpaceAmount(in float value);
  short getExpireAfter();
  void setExpireAfter(in short value);
  boolean getSinglePlayMode();
  void setSinglePlayMode(in boolean value);
  short getBTMinPort();
  void setBTMinPort(in short value);
  short getBTMaxPort();
  void setBTMaxPort(in short value);
  boolean getStartupTasksDone();
  void setStartupTasksDone(in boolean value);
  boolean getResumeVideosMode();
  void setResumeVideosMode(in boolean value);
  void showCursor(in boolean display);
  void createNewPlaylist();
  void createNewPlaylistFolder();
  void createNewSearchChannel();
  void createNewChannelFolder();
  void handleDrop(in AString dropData, in AString dropType, in AString sourceData);
  void removeCurrentSelection();
  void checkForUpdates();
  void removeCurrentItems();
  void copyCurrentItemURL();
  void selectAllItems();
  void createNewChannelGuide();
  void renameCurrentChannel();
  void recommendCurrentChannel();
  void renameCurrentPlaylist();
  void removeCurrentPlaylist();
  void openDonatePage();
  void saveVideoFile(in AString path);
  void startupDoSearch(in AString path);
  void startupCancelSearch();
  AString getSpecialFolder(in AString name);
  void extractFinish(in float duration, in boolean screenshot_success);
  void createProxyObjects();
  void printOut(in AString output);
  void addMenubar(in nsIDOMDocument doc);
  void getLabel(in AString action, in AString state, out AString label);
  void addDirectoryWatch(in AString filename);
  void removeDirectoryWatch(in AString id);
  void toggleDirectoryWatchShown(in AString id);
  boolean minimizeToTray();
  void setMinimizeToTray(in boolean newSetting);
};
