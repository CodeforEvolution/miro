#!/usr/bin/env python2.4
# -*- mode: python -*-

# This comes first.  Seriously.
import miro.xlibhelper as xlibhelper
if xlibhelper.XInitThreads() == 0:
    print "WARNING: XInitThreads() failed!"

import os.path
import sys
import optparse

import pygtk
pygtk.require('2.0')

import miro
# Make sure miro modules are on the search path
sys.path.insert(0, os.path.abspath(os.path.dirname(miro.__file__)))

import upgrade
upgrade.upgrade()

# Set up gettext before everything else
import gtcache
gtcache.init()

import config
import prefs

if '--unittest' in sys.argv:
    # handle this outside optparse, because unittest has its own option set
    sys.argv.remove('--unittest')
    import app
    import unittest
    import test
    unittest.main(module=test)

usage = "usage: %prog [options] [torrent files] [video files]"
parser = optparse.OptionParser(usage=usage)
parser.add_option('--unittest', dest='unittest', default=False,
    action='store_true', 
    help='run unittests instead of launching the program')
parser.add_option('-v', '--version', dest='version', default=False,
    action='store_true', help='print version info')
parser.add_option('--profile', metavar='<file>', help='write profiling information to FILE')
parser.add_option('--bias', metavar='<bias>', help='set profiling bias to BIAS', type=float, default=None)
parser.add_option('--sync', help='Use X Syncronously (for debugging)', default=False, action="store_true")
parser.add_option("--xine-driver", metavar="<driver>",
                  action="store", type="string", dest="xine_driver", help="Xine driver (xv, xshm, opengl, sdl, dxr3, aadxr3, aa, caca, or xxmc)")
parser.add_option('--enable-xine-hack', dest="use_xv_hack", action="store_true", help='Enable the Xine XV Hack (default)')
parser.add_option('--disable-xine-hack', dest="use_xv_hack", action="store_false", help='Disable the Xine XV Hack')
(options, args) = parser.parse_args()

def startapp():
    import platformutils
    platformutils.initializeLocale()

    import singleclick
    for i in xrange(len(args)):
        if args[i].startswith('file://'):
            args[i] = args[i][len('file://'):]
    singleclick.setCommandLineArgs(args)
    import app
    import frontend
    import gconf

    # These aren't in config because we can override them with the
    # command line, so config.get() wouldn't return the correct value
    # anyway.  Maybe, eventually, we should integrate command line
    # config support into prefs.py and config.py.
    frontend.use_xine_hack = options.use_xv_hack
    if frontend.use_xine_hack is None:
        use_xine_hack = gconf.client_get_default().get("/apps/miro/use_xine_xv_hack")
        if use_xine_hack is None or (use_xine_hack.type !=
                                     gconf.VALUE_BOOL):
            frontend.use_xine_hack = True
        else:
            frontend.use_xine_hack = use_xine_hack.get_bool()
    #print "USING XINE XV HACK: %s" % frontend.use_xine_hack
    frontend.defaultXineDriver = options.xine_driver
    if frontend.defaultXineDriver is None:
        driver = gconf.client_get_default().get("/apps/miro/default_xine_driver")
        if driver is None or (driver.type != gconf.VALUE_STRING):
            frontend.defaultXineDriver = "xv"
        else:
            frontend.defaultXineDriver = driver.get_string()
    #print "Xine driver is %s" % frontend.defaultXineDriver
    app.main()
if options.version:
    print "Miro"
    print "Version: %s" % config.get(prefs.APP_VERSION)
    print ""
    print "Miro comes with ABSOLUTELY NO WARRANTY."
    print "This is free software, and you are welcome to redistribute it"
    print "under certain conditions.  See license.txt for details."
elif options.profile:
    import profile
    import eventloop
    if options.sync:
        pass
    def main():
        import app
        app.main()
    if (options.bias):
        profile.Profile.bias = options.bias
    eventloop.profile_file = options.profile
    profile.run ('main()', options.profile)
else:
    try:
        import dbus
        try:
            import dbus_bindings
        except ImportError, main_error:
            try:
                dbus_bindings = dbus.dbus_bindings
            except:
                raise main_error
        import onetime
        try:
            onetime.OneTime()
            startapp()
        except onetime.NameExistsException:
            bus = dbus.SessionBus()
            proxy_obj = bus.get_object('org.participatoryculture.dtv.onetime', '/org/participatoryculture/dtv/OneTime')
            iface = dbus.Interface(proxy_obj, 'org.participatoryculture.dtv.OneTimeIface')
            for i in xrange(len(args)):
                args[i] = args[i].decode('latin1')
            dbusargs = dbus.Array(args, signature="s")
    
            iface.HandleArgs(dbusargs)
        except dbus_bindings.DBusException:
            startapp()
    except ImportError:
        startapp()
