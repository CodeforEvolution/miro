<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      eventCookie="@@@eventCookie@@@" dtvPlatform="@@@dtvPlatform@@@">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />

<link href="resource:css/main.css" rel="stylesheet" type="text/css" />
<link href="resource:css/download.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="resource:templates/osxdnd.js" />
<t:include filename="dynamic.js" />
<t:include filename="settings.js" />

    <t:execOnLoad><![CDATA[
import config
import prefs
import platformutils
import util
import downloader

def getFreeSpace():
    bytes = platformutils.getAvailableBytesForMovies()
    return util.formatSizeForUser(bytes, "0B")

def getAvailableSpace():
    bytes = platformutils.getAvailableBytesForMovies()
    if config.get(prefs.PRESERVE_DISK_SPACE):
        preserved = config.get(prefs.PRESERVE_X_GB_FREE) * 1024 * 1024 * 1024
        bytes -= preserved
    return util.formatSizeForUser(bytes, "0B")

def getUpRate():
    return "%.3f" % (downloader.totalUpRate / 1024.0,)


global searchFilter
searchFilter = lambda x: filters.matchingItems(x, None)

def makeDownloadCategoryView(cat):
    return views.downloadingItems.filterWithIndex(indexes.downloadsByCategory, cat)
allNormalDownloads = makeDownloadCategoryView('normal')
allExternalDownloads = views.items.filter(lambda x: x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile())
# Specifically don't include anything in external downloads in uploads.
allUploads = views.items.filter(lambda x: x.downloader and x.downloader.getState() == 'uploading' and not (x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile()))
allPendingDownloads = makeDownloadCategoryView('pending')
allPausedDownloads = views.pausedItems

matchingNormalDLs = allNormalDownloads.filter(lambda x:searchFilter(x))
matchingExternalDLs = allExternalDownloads.filter(lambda x:searchFilter(x))
matchingULs = allUploads.filter(lambda x:searchFilter(x))
matchingPendingDLs = allPendingDownloads.filter(lambda x:searchFilter(x))
matchingPausedDLs = allPausedDownloads.filter(lambda x:searchFilter(x))

normalDownloads = matchingNormalDLs.sort(sorts.itemBy)
externalDownloads = matchingExternalDLs.sort(sorts.itemBy)
uploads = matchingULs.sort(sorts.itemBy)
pendingDownloads = matchingPendingDLs.sort(sorts.itemBy)
pausedDownloads = matchingPausedDLs.sort(sorts.itemBy)

def updateSearchString(newSearch):
    global searchFilter
    if len(newSearch) == 0:
        searchFilter = lambda x: filters.matchingItems(x, None)
    else:
        searchFilter = lambda x: filters.matchingItems(x, newSearch)
    allNormalDownloads.recomputeFilter(matchingNormalDLs)
    allExternalDownloads.recomputeFilter(matchingExternalDLs)
    allUploads.recomputeFilter(matchingULs)
    allPendingDownloads.recomputeFilter(matchingPendingDLs)
    allPausedDownloads.recomputeFilter(matchingPausedDLs)

def setSortBy(by, handle):
    sorts.setSortBy(by)
    allNormalDownloads.recomputeFilter(matchingNormalDLs)
    allExternalDownloads.recomputeFilter(matchingExternalDLs)
    allUploads.recomputeFilter(matchingULs)
    allPendingDownloads.recomputeFilter(matchingPendingDLs)
    allPausedDownloads.recomputeFilter(matchingPausedDLs)
    handle.forceUpdate()
]]>
    </t:execOnLoad>
    <t:execOnUnload><![CDATA[
allNormalDownloads.unlink()
allExternalDownloads.unlink()
allUploads.unlink()
allPendingDownloads.unlink()
matchingPausedDLs.unlink()
]]>
    </t:execOnUnload>
</head>

<body onkeydown="sendKeyToSearchBox(event);">

<!-- TITLE BAR ************************************************************ -->
<div id="main-titlebar">
	<div id="main-icon" class="noborder"><img src="resource:images/download-icon.png" /></div>
	<div id="main-titlebar-center">
            <h1 id="main-title" i18n:translate="">Downloading</h1>
	</div>
	<div t:updateForConfigChange="">


	<div id="main-upper-right">


		<div id="downloads-global-actions">
			<div><p t:hideIf="views.downloadingItems.len() == 0" t:updateHideOnView="views.downloadingItems"><a href="#" onclick="return eventURL('action:pauseAll');" title="Pause All"><img src="resource:images/pause-all-downloads.png" /><br /><span i18n:translate="">Pause All</span></a></p>&nbsp;</div>
			<div><p t:hideIf="views.pausedItems.len() == 0" t:updateHideOnView="views.pausedItems"><a href="#" onclick="return eventURL('action:resumeAll');" title="Resume All"><img src="resource:images/resume-all-downloads.png" /><br /><span i18n:translate="">Resume All</span></a></p>&nbsp;</div>
		</div>
<br style="clear: both;" /> 

		<span t:hideIf="getFreeSpace() == getAvailableSpace()">
			<span id="downloads-free-disk" i18n:translate=""><span i18n:name="size" t:replace="getFreeSpace()" /> free on disk - </span>
		</span>
		<span id="downloads-free-space" i18n:translate=""><span i18n:name="size" t:replace="getAvailableSpace()" /> free for downloads</span>
		<span t:hideIf="getUpRate() &lt; 1.0" t:updateHideOnView="views.remoteDownloads">
			<span id="total-up-rate" i18n:translate=""> - <span i18n:name="size" t:replace="getUpRate()" /> KB/s total upload</span>
		</span>
		
	</div>
	</div>
</div>
<!-- / TITLE BAR -->

<!-- SORT BAR ************************************************************* --> 
<div t:updateForView="normalDownloads"> 
<t:includeTemplate filename="sort-bar" /> 
</div> 
<!-- / SORT BAR -->

<div id="main-container">

	<!-- VIDEOS ************************************************** -->
	<div t:repeatForView="normalDownloads" t:repeatTemplate='download-item' />
	<div t:repeatForView="pendingDownloads" t:repeatTemplate='download-item' />
	<div t:repeatForView="pausedDownloads" t:repeatTemplate='download-item' />
	<!-- / VIDEOS -->
	<div t:hideIf="externalDownloads.len() == 0" 
		t:updateHideOnView="externalDownloads" class="main-channelbar">
		<span style="margin-left: 12px"> External Torrents</span>
		<a i18n:translate="" href="#" onclick="return eventURL('action:clearTorrents');" class="clear-completed-link" title="Clear Completed Torrents">Clear Completed Torrents</a>
        </div>
	<div t:repeatForView="externalDownloads" t:repeatTemplate='download-item' />
	<div t:hideIf="uploads.len() == 0" 
		t:updateHideOnView="uploads" class="main-channelbar">
		<span style="margin-left: 12px"> Uploading Torrents</span>
        </div>
	<div t:repeatForView="uploads" t:repeatTemplate='download-item' />
</div>

</body>
</html>
