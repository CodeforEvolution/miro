<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      eventCookie="@@@eventCookie@@@" dtvPlatform="@@@dtvPlatform@@@">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />

<link href="resource:css/main.css" rel="stylesheet" type="text/css" />
<t:include filename="dynamic.js" />
<t:include filename="settings.js" />

    <t:execOnLoad><![CDATA[
import config
import prefs
import platformutils
import util

def getFreeSpace():
    bytes = platformutils.getAvailableBytesForMovies()
    return util.formatSizeForUser(bytes, "0B")

def getAvailableSpace():
    bytes = platformutils.getAvailableBytesForMovies()
    if config.get(prefs.PRESERVE_DISK_SPACE):
        preserved = config.get(prefs.PRESERVE_X_GB_FREE) * 1024 * 1024 * 1024
        bytes -= preserved
    return util.formatSizeForUser(bytes, "0B")


global searchFilter
searchFilter = lambda x: filters.matchingItems(x, None)

def makeDownloadCategoryView(cat):
    return views.downloadingItems.filterWithIndex(indexes.downloadsByCategory, cat)
allNormalDownloads = makeDownloadCategoryView('normal')
allExternalDownloads = views.items.filter(lambda x: x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile())
allPendingDownloads = makeDownloadCategoryView('pending')

matchingNormalDLs = allNormalDownloads.filter(lambda x:searchFilter(x))
matchingExternalDLs = allExternalDownloads.filter(lambda x:searchFilter(x))
matchingPendingDLs = allPendingDownloads.filter(lambda x:searchFilter(x))

normalDownloads = matchingNormalDLs.sort(sorts.item)
externalDownloads = matchingExternalDLs.sort(sorts.item)
pendingDownloads = matchingPendingDLs.sort(sorts.item)

def updateSearchString(newSearch):
    global searchFilter
    if len(newSearch) == 0:
        searchFilter = lambda x: filters.matchingItems(x, None)
    else:
        searchFilter = lambda x: filters.matchingItems(x, newSearch)
    allNormalDownloads.recomputeFilter(matchingNormalDLs)
    allExternalDownloads.recomputeFilter(matchingExternalDLs)
    allPendingDownloads.recomputeFilter(matchingPendingDLs)
]]>
    </t:execOnLoad>
    <t:execOnUnload><![CDATA[
matchingNormalDLs.unlink()
allExternalDownloads.unlink()
matchingPendingDLs.unlink()
]]>
    </t:execOnUnload>
</head>

<body>

<!-- TITLE BAR ************************************************************ -->
<div id="main-titlebar">
	<div id="main-titlebar-avatar" class="noborder"><img src="resource:images/download-icon.png" /></div>
	<div id="main-titlebar-channelname">
		<h1 i18n:translate="">Active Downloads</h1>
	</div>
	<div id="main-titlebar-tasks" class="big-search">
		<div id="main-titlebar-tasks-search">
		<input type="search" placeholder="Search Videos" class="main-titlebar-tasks-search"  onfocus="startEditSearch(this, null)" onblur="endEditSearch()" />
		</div>
	</div>
	<div t:updateForConfigChange="">
	<div id="main-titlebar-free-space">
		<div t:hideIf="getFreeSpace() == getAvailableSpace()">
			<p i18n:translate=""><span i18n:name="size" t:replace="getFreeSpace()" /> disk space free</p>
		</div>
		<p i18n:translate=""><span i18n:name="size" t:replace="getAvailableSpace()" /> available for downloads</p>
	</div>
	</div>
</div>
<!-- / TITLE BAR -->

<div id="main-container">

	<!-- VIDEOS ************************************************** -->
	<span t:repeatForView="normalDownloads">
                <span t:replaceMarkup="this.getItemXML(viewName, view)" />
	</span>
	<span t:repeatForView="pendingDownloads">
                <span t:replaceMarkup="this.getItemXML(viewName, view)" />
	</span>
	<!-- / VIDEOS -->
	<div t:hideIf="externalDownloads.len() == 0" 
		t:updateHideOnView="externalDownloads" class="main-channelbar">
		<h1 i18n:translate="">External Torrents 
			<a i18n:translate="" href="#" onclick="return eventURL('action:clearTorrents');" style="text-decoration: underline; margin-left: 15px; font-weight: normal;" title="Clear Completed Torrents">Clear Completed Torrents</a>
		</h1>
        </div>
	<span t:repeatForView="externalDownloads">
            <span t:replaceMarkup="this.getItemXML(viewName, view)" />
	</span>
</div>

</body>
</html>
