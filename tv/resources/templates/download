<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      eventCookie="@@@eventCookie@@@" dtvPlatform="@@@dtvPlatform@@@">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<link href="resource:css/main.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="resource:templates/osxdnd.js" />
<t:include filename="dynamic.js" />
<t:include filename="settings.js" />

    <t:execOnLoad><![CDATA[
from miro import config
from miro import prefs
from miro import util
from miro import downloader
from miro.gtcache import gettext as _
from miro.plat.utils import getAvailableBytesForMovies

def getFreeSpace():
    bytes = getAvailableBytesForMovies()
    return util.formatSizeForUser(bytes, "0B", False)

def getAvailableSpace():
    bytes = getAvailableBytesForMovies()
    if config.get(prefs.PRESERVE_DISK_SPACE):
        preserved = config.get(prefs.PRESERVE_X_GB_FREE) * 1024 * 1024 * 1024
        bytes -= preserved
    return util.formatSizeForUser(bytes, "0B", False)

def getUpRate():
    return _("%0.1f KB/s uploading") % (downloader.totalUpRate / 1024.0,)

def getDownRate():
    return _("%0.1f KB/s downloading") % (downloader.totalDownRate / 1024.0,)

global searchFilter
searchFilter = lambda x: filters.matchingItems(x, None)

def makeDownloadCategoryView(cat):
    return views.downloadingItems.filterWithIndex(indexes.downloadsByCategory, cat)
allNormalDownloads = makeDownloadCategoryView('normal')
allExternalDownloads = views.items.filter(lambda x: x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile())
# Specifically don't include anything in external downloads in uploads.
allPendingDownloads = makeDownloadCategoryView('pending')
allPausedDownloads = views.pausedItems.filter (lambda x: not (x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile()))

allUploads = views.items.filter(lambda x: x.downloader and x.downloader.getState() in (u'uploading', u'uploading-paused') and not (x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile()))
pausedUploads = allUploads.filter(lambda x: x.downloader and x.downloader.getState() == u'uploading-paused' and not (x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile()))
unpausedUploads = allUploads.filter(lambda x: x.downloader and x.downloader.getState() == u'uploading' and not (x.getFeed().url == 'dtv:manualFeed' and x.isNonVideoFile()))


matchingNormalDLs = allNormalDownloads.filter(lambda x:searchFilter(x),sortFunc=sorts.itemSortDownloads.sort,resort=True)
matchingExternalDLs = allExternalDownloads.filter(lambda x:searchFilter(x))
matchingULs = allUploads.filter(lambda x:searchFilter(x),sortFunc=sorts.itemSortSeedingTorrents.sort,resort=True)
matchingPendingDLs = allPendingDownloads.filter(lambda x:searchFilter(x),sortFunc=sorts.itemSortDownloads.sort,resort=True)
matchingPausedDLs = allPausedDownloads.filter(lambda x:searchFilter(x),sortFunc=sorts.itemSortDownloads.sort,resort=True)

def updateSearchString(newSearch):
    global searchFilter
    if len(newSearch) == 0:
        searchFilter = lambda x: filters.matchingItems(x, None)
    else:
        searchFilter = lambda x: filters.matchingItems(x, newSearch)
    allNormalDownloads.recomputeFilter(matchingNormalDLs)
    allExternalDownloads.recomputeFilter(matchingExternalDLs)
    allUploads.recomputeFilter(matchingULs)
    allPendingDownloads.recomputeFilter(matchingPendingDLs)
    allPausedDownloads.recomputeFilter(matchingPausedDLs)

def setSortBy(by, handle):
    sorts.itemSortDownloads.setSortBy(by)
    allNormalDownloads.recomputeSort(matchingNormalDLs)
    allPendingDownloads.recomputeSort(matchingPendingDLs)
    allPausedDownloads.recomputeSort(matchingPausedDLs)
    sorts.itemSortSeedingTorrents.setSortBy(by)
    allUploads.recomputeSort(matchingULs)
    handle.forceUpdate()
]]>
    </t:execOnLoad>
    <t:execOnUnload><![CDATA[
allNormalDownloads.unlink()
allExternalDownloads.unlink()
allUploads.unlink()
allPendingDownloads.unlink()
allPausedDownloads.unlink()
]]>
    </t:execOnUnload>
</head>

<body onkeydown="sendKeyToSearchBox(event);">

<!-- TITLE BAR ************************************************************ -->
<div id="main-titlebar" class="static-tab">
	<div id="main-icon" class="noborder static-tab">
		<img src="resource:images/icon-downloading_large.png" />
	</div>
	<div id="search-box-container">
		<input id="search-box" type="search" onfocus="onSearchFocus(this)" onblur="endEditSearch()" value="***_('Find')***"/>
	</div>
	<h1 id="main-title" class="static-tab" i18n:translate="">Downloading</h1>
	
</div> <!-- end main-titlebar -->
	<div id="sub-titlebar" class="downloads">
		
		<div class="sub-titlebar-right">
			<div class="speeds" t:updateForView="views.remoteDownloads">
  			<ul class="download-rates">
  				<li t:showIf="downloader.totalDownRate > 1">
  					<span t:replace="getDownRate()"/>
  				</li>
  				<li t:showIf="downloader.totalUpRate > 1">
  					<span t:replace="getUpRate()"/>
  				</li>
  			</ul>
  		</div>
			<a t:hideIf="views.downloadingItems.len() + unpausedUploads.len() == 0" t:updateHideOnView="views.downloadingItems" class="button gray" href="#" onclick="return eventURL('action:pauseAll');" title="Pause All">
				<span i18n:translate="">Pause All</span>
			</a>
			<a class="button gray" t:hideIf="views.pausedItems.len() + pausedUploads.len() == 0" t:updateHideOnView="views.pausedItems" href="#" onclick="return eventURL('action:resumeAll');" title="Resume All">
				<span i18n:translate="">Resume All</span>
			</a>
  	
		</div>

	<div id="download-info">
	        <span t:updateForConfigChange="">
			<span t:hideIf="getFreeSpace() == getAvailableSpace()">
					<span i18n:translate=""><span i18n:name="size" t:replace="getAvailableSpace()" /> free for downloads</span>
				<span>&nbsp;&nbsp;&nbsp;(<span i18n:translate=""><span i18n:name="size" t:replace="getFreeSpace()" /> free on disk</span>)</span>
			</span>
			<span t:showIf="getFreeSpace() == getAvailableSpace()" i18n:translate=""><span i18n:name="size" t:replace="getFreeSpace()" /> free on disk</span>
		</span>
	</div>	<!-- end download-info -->
</div> <!-- end sub-titlebar -->
        
<div id="main-container" class="download">
  <!-- SORT BAR ************************************************************* -->
  <div t:updateForView="views.downloadingItems" t:hideIf="allNormalDownloads.len() + allExternalDownloads.len() + allUploads.len() + allPendingDownloads.len() + allPausedDownloads.len() == 0">
      <t:executeTemplate filename="static-tab-sort-bar" 
	                 itemSort="sorts.itemSortDownloads" />
  </div>
  <!-- / SORT BAR -->

  <div t:hideIf="allNormalDownloads.len() == 0" t:updateHideOnView="allNormalDownloads" class="main-channelbar downloading-channelbar no-arrow">
		<span i18n:translate="">Channel Downloads</span>
	</div>

	<!-- VIDEOS ************************************************** -->
	<div t:repeatForView="matchingNormalDLs" t:repeatTemplate='download-item' t:containerDiv="true" />
	<div t:repeatForView="matchingPendingDLs" t:repeatTemplate='download-item' t:containerDiv="true" />
	<div t:repeatForView="matchingPausedDLs" t:repeatTemplate='download-item' t:containerDiv="true" />
	<!-- / VIDEOS -->
	<div t:updateForView="matchingExternalDLs">
		<div t:hideIf="matchingExternalDLs.len() == 0">
			<div class="main-channelbar downloading-channelbar no-arrow">
				<span i18n:translate="">External Downloads</span>
				<a i18n:translate="" href="#" onclick="return eventURL('action:clearTorrents');" class="clear-completed-link" title="Clear Completed and Failed Downloads">Clear Completed and Failed Downloads</a>
			</div>
		</div>
	</div> 
	<div t:repeatForView="matchingExternalDLs" t:repeatTemplate='download-item' t:containerDiv="true" />

	<div t:updateForView="matchingULs">
		<div t:hideIf="matchingULs.len() == 0">
			<div class="main-channelbar seeding-channelbar no-arrow">
				<span i18n:translate="">Seeding Torrents</span>
			</div>
		</div>
	</div>
	<div t:repeatForView="matchingULs" t:repeatTemplate='download-item' t:containerDiv="true" />
</div>

</body>
</html>
