<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      eventCookie="@@@eventCookie@@@" dtvPlatform="@@@dtvPlatform@@@">

<head>
    <base href="***feed.getBaseHref()***" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Miro Channel View</title>

    <link href="resource:css/main.css" rel="stylesheet" type="text/css" />
    <t:include filename="dynamic.js" />
    <t:include filename="settings.js" />
    <script type="text/javascript" src="resource:templates/osxdnd.js" />
    <t:execOnLoad><![CDATA[
from miro import config, prefs
#print templateState
global feed, showDownloads, showWatchableItems, showNewItems, allItemsMode, allItems, watchableItems, matchingItems, newItems, itemSort, itemSortWatchable, itemSortDownloading, notDeleted

def _setFeed(kargs):
    global feed, allItemsMode, showDownloads, showNewItems, showWatchableItems

    # The main section
    allItemsMode = False
    
    # Initial states of views in this template
    showDownloads = False
    showNewItems = True
    showWatchableItems = True

    feed = views.feeds.getObjectByID(int(kargs['id']))
    filters.switchNewItemsChannel(feed)
    sorts.switchUnwatchedFirstChannel(feed)

def _updateView ():
    global showNewItems, allItemsMode

    showNewItems = (len(watchableItems) == 0) or (len(newItems) > 0 and feed.getAutoDownloadMode() == 'off') or feed.getURL().startswith('dtv:directoryfeed')

    if len(newItems) == 0 or not showNewItems:
        allItemsMode = True
        matchingItems.recomputeFilter(newItems)

    feed.updateIcons()

def reInit(*args, **kargs):
    global feed, allItems, showDownloads, showWatchableItems, showNewItems, allItemsMode, watchableItems, matchingItems, newItems, itemSort, itemSortWatchable, itemSortDownloading

    if feed.idExists():
        feed.markAsViewed()

    #print "reinitting %s" % repr(kargs)
    _setFeed(kargs)
    itemSort = feed.itemSort
    itemSortDownloading = feed.itemSortDownloading
    itemSortWatchable = feed.itemSortWatchable
    newItems.sortFunc = feed.itemSort.sort
    downloadingItems.sortFunc = feed.itemSortDownloading.sort
    watchableItems.sortFunc = feed.itemSortWatchable.sort

    allItems.changeIndexValue(indexes.itemsByFeed, int(kargs['id']))
    views.feeds.recomputeFilter(thisFeedView)

    _updateView()

def showDownloadsFilter(x):
    return showDownloads

def showWatchableFilter(x):
    return showWatchableItems

def showNewFilter(x):
    isNew = filters.newItems(x)
    # need to make call newItems() so that the filter remembers if the item
    # was flagged as new or not.
    return showNewItems and (allItemsMode or isNew)

def updateSearchString(newSearch):
    global feed
    if len(newSearch) == 0:
        feed.setInlineSearchTerm(None)
    else:
        feed.setInlineSearchTerm(newSearch)
    allItems.recomputeFilters()

def toggleDownloadsView(handle):
    global showDownloads
    showDownloads = not showDownloads
    allDownloadingItems.recomputeFilter(downloadingItems)
    handle.forceUpdate()

def toggleWatchableView(handle):
    global showWatchableItems
    showWatchableItems = not showWatchableItems
    allWatchableItems.recomputeFilter(watchableItems)
    handle.forceUpdate()

def toggleNewItemsView(handle):
    global showNewItems
    showNewItems = not showNewItems
    matchingItems.recomputeFilter(newItems)
    handle.forceUpdate()

def toggleAllItemsMode(handle):
    global allItemsMode
    allItemsMode = not allItemsMode
    matchingItems.recomputeFilter(newItems)
    handle.forceUpdate()

def setSortBy(by, handle):
   # main
   feed.itemSort.setSortBy(by)
   matchingItems.recomputeSort(newItems)
   # downloading
   feed.itemSortDownloading.setSortBy(by)
   allDownloadingItems.recomputeSort(downloadingItems)
   # downloaded
   feed.itemSortWatchable.setSortBy(by)
   allWatchableItems.recomputeSort(watchableItems)
   handle.forceUpdate()

_setFeed(kargs)

allItems = views.items.filterWithIndex(indexes.itemsByFeed, feed.getID())
notDeleted = allItems.filter(filters.notDeleted)
matchingItems = notDeleted.filter(lambda x: filters.matchingItems(x, feed.inlineSearchTerm))
newItems = matchingItems.filter(showNewFilter, sortFunc=feed.itemSort.sort, resort=True)

allDownloadingItems = matchingItems.filter(filters.downloadingOrPausedItems)
downloadingItems = allDownloadingItems.filter(showDownloadsFilter,sortFunc=feed.itemSortDownloading.sort,resort=True)
allWatchableItems = matchingItems.filter(filters.watchableItems)
watchableItems = allWatchableItems.filter(showWatchableFilter,sortFunc=feed.itemSortWatchable.sort,resort=True)

thisFeedView = views.feeds.filter(lambda x: x is feed)
itemSort = feed.itemSort
itemSortWatchable = feed.itemSortWatchable
itemSortDownloading = feed.itemSortDownloading

def allItemsHaveState(view, state):
    for item in view:
        if item.getState() != state:
            return False
    return True
def allItemsPaused(view):
    return allItemsHaveState(view, 'paused')
def allItemsDownloading(view):
    return allItemsHaveState(view, 'downloading')

_updateView()

isFolder = False
]]>
    </t:execOnLoad>
    <t:execOnUnload><![CDATA[
matchingItems.unlink()
thisFeedView.unlink()
notDeleted.unlink()
allItems.unlink()
if feed.idExists():
    feed.markAsViewed()
]]>
    </t:execOnUnload>

</head>

<body onkeydown="sendKeyToSearchBox(event);">
	<div id="feed-settings">
		<div t:updateForView="thisFeedView">
			<t:includeTemplate filename="feed-settings" />
		</div>
	</div>

	<!-- TITLE BAR ************************************************************ -->

	<div id="main-titlebar">
		<div t:updateForView="thisFeedView">
			<div>
				<img id="main-icon" src="***feed.getThumbnail()***" alt=""/>
			</div>
			
			<div id="search-box-container" t:hideIf="'feed' in localvars and feed.getURL() == 'dtv:search'">
				<div t:showIf="feed.inlineSearchTerm is None">
					<input id="search-box" type="search" onfocus="onSearchFocus(this)" onblur="endEditSearch()" value="***_('Search')***" />
				</div>
				<div t:showIf="feed.inlineSearchTerm is not None">
					<input id="search-box" type="search" onfocus="onSearchFocus(this)" onblur="endEditSearch()" value="***feed.inlineSearchTerm***" searching="1"/>
				</div>
			</div>
			
			<h1 id="main-title" t:replace="feed.getTitle()" />
			
		</div>
	</div> <!-- // end main-titlebar -->
		
	<div id="sub-titlebar">
		<div t:updateForView="thisFeedView">
			
			<div class="sub-titlebar-right" t:hideIf="feed.getURL().startswith('dtv:directoryfeed')">
				<ul>
					<li t:hideIf="feed.getLink() == ''">
						<a class="button gray" href="***feed.getLink()***">
									<span i18n:translate="">Visit Website</span>
						</a>
					</li>
					<li>
						<a class="button gray" href="#" onclick="return recommendChannel('@@@feed.getTitle()@@@', '@@@feed.getURL()@@@');">
							<span i18n:translate="">Send to a Friend</span>
						</a>
					</li>
					<li>
						<a class="button gray" href="#" onclick="return showSettings();">
									<span i18n:translate="">Settings</span>
						</a>
					</li>
				</ul>
			</div>


				<div id="auto-download">
					<div t:hideIf="feed.getURL().startswith('dtv:directoryfeed')">
						<div class="auto-download">
							
							<span id="auto-label" i18n:translate="">Auto Download</span>
							
							<a class="button select" onclick="showSelectBoxMenu('auto-download-menu');">
								<div t:hideIf="feed is None"><span t:replace="feed.getAutoDownloadMode()" /></div>
							</a>




							<br style="clear:both;" />
							<table cellpadding="0" cellspacing="0" id="auto-download-menu" class="select-box">
								<tr>
									<td class="tl" />
									<td class="tc" />
									<td class="tr" />
								</tr>
								<tr>
									<td class="cl" />
									<td class="cc">
										<ul t:hideIf="feed is None">
											<li onclick="return eventURL('action:setAutoDownloadMode?mode=all&amp;feed=@@@feed.getID()@@@');" ><a href="#"><strong>ALL</strong> - Get all videos</a></li>
											<li onclick="return eventURL('action:setAutoDownloadMode?mode=new&amp;feed=@@@feed.getID()@@@');" ><a href="#"><strong>NEW</strong> - Get only new videos</a></li>
											<li onclick="return eventURL('action:setAutoDownloadMode?mode=off&amp;feed=@@@feed.getID()@@@');" ><a href="#"><strong>OFF</strong> - Don't auto-download videos</a></li>
										</ul>
									</td>
									<td class="cr" />
								</tr>
								<tr>
									<td class="bl" />
									<td class="bc" />
									<td class="br" />
								</tr>
							</table>
						</div>
					</div>
				</div>
				
			</div>
				
	</div> <!-- // end sub-titlebar -->
	<!-- CHANNEL CONTAINER **************************************************** -->
	<div id="main-container">

           <div class="main-container-scraping" t:showIf="feed.isScraped() and feed.isUpdating()" t:updateHideOnView="thisFeedView">
			<div class="scraping-indicator">
				<img align="left" src="resource:images/scraping-indicator-left.gif" />
				<img align="right" src="resource:images/scraping-indicator-right.gif" />
				<div class="scraping-content" i18n:translate="">Looking for videos 
					at this URL
				</div>
			</div>
		</div>

		<div class="hide-channel-title">
			<t:includeTemplate filename="channel-content" />
		</div>
	</div>
	<!-- / CHANNEL ITEMS LIST -->

</body>
</html>
