* Python binding for VLC

This module provides a MediaControl object, which implements an API
inspired from the OMG Audio/Video Stream 1.0 specification. Moreover,
the module provides a Object type, which gives a low-level access to
the vlc objects and their variables. 

The MediaControl API is exactly the same as the one implemented in the
CORBA module (both use the same underlying layer
mediacontrol-core.[ch]). Apart from the initialization code,
applications can switch from one implementation to another without
changes.

* Licence

Author: Olivier Aubert <olivier.aubert@liris.univ-lyon1.fr>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

* Compiling

Extract the pyvlc directory at the root of a compiled VLC tree. Run:

python setup.py build

in the pyvlc directory.

If some things fail (bad includes, libraries, ...), you can try to
edit the setup.py file, and inform me of what went wrong [Note: I am
aware that the linking of the module is not valid on Linux, please use
"make link" to link it, or fix setup.py]

If all goes well, you can run:

python setup.py install

to install the module, or simply go the (new) directory
pyvlc/build/lib.*, where the vlc.so file lies, and run python from
there.

Note: the VLC tree does not have to be fully compiled. The required
steps are the configuration and the building of basic include files,
with the following commands:

./configure [--configure-related-options]
./toolbox --update-includes

* Issues

A number of issues remain :

- [Linux] I cannot get setup.py to generate a correct linking command
(libraries order), so I put a Makefile link target to do so. Should
fix the setup.py file (which works OK on win32).

- [Linux] stack corruption when passing 2 arguments (does not happen
with 1 or 3 or more arguments) to mediacontrol_new. Happens in
VLC_Create().

- [Win32] general instabilities. Maybe related to the previous item
(something wrong in the initialization). However, once an instance is
initialized, it runs fine.

- [MacOSX] Should compile, but not tested.

- See TODO for more long-term wishes

* Use

Two main objects are provided by the vlc module to interact with vlc:
- vlc.MediaControl
- vlc.Object

The vlc.MediaControl class implements the MediaControl API, defined in
the MediaControl.idl file (see
http://liris.cnrs.fr/advene/download/MediaControl.idl). It is thus
similar to the API used in the CORBA plugin, and allows for
development using either access.

The vlc.Object class implements a low-level access to the vlc
objects. It provides access to the variables held by each object
through get() and set() methods, as well as the list of the children
of the object.

To obtain a more comfortable use under an interactive shell such as
IPython (http://ipython.scipy.org/), a wrapper class (VLCObject) has
been implemented above vlc.Object, in vlcdebug.py. It converts the
vlc.Object variables into attributes, and allows completion on their
names (note: the variable names are mangled, converting - to _, in
order to make them valid attribute names). It also provides a .tree()
method displaying the object tree.

* Example session:

pyvlc>ipython vlcdebug.py

In [1]: mc=vlc.MediaControl(['--advanced', '--verbose', '1'])

In [2]: mc.playlist_add_item('movie.mpg')

In [3]: mc.start(0)

In [4]: mc.pause(0)

In [5]: o=VLCObject(0)  # Get the root object

In [6]: o.info()
Out[6]: 
{'object-id': 1,
 'object-name': 'vlc',
 'object-type': 'vlc',
 'refcount': 1,
 'thread': False,
 'thread-id': 0L}

In [7]: o.tree()
  VLCObject 1 (vlc) : vlc
   VLCObject 226 (playlist) : None
    VLCObject 229 (input) : None
     VLCObject 233 (access) : None
      VLCObject 238 (stream) : None
     VLCObject 239 (demux) : None
     VLCObject 272 (decoder) : None
     VLCObject 276 (decoder) : None
   VLCObject 227 (interface) : None
   VLCObject 277 (audio output) : None
    VLCObject 280 (generic) : None
    VLCObject 283 (generic) : None

In [8]: i=o.find('input') # Get the input child of the vlc object

In [9]: i.info()
Out[9]: 
{'object-id': 229,
 'object-name': None,
 'object-type': 'input',
 'refcount': 3,
 'thread': True,
 'thread-id': 1114016688L}

In [10]: i.<TAB>  # Invoking completion on the input object
i.__class__             i.demuxed_id3           i.rate_slower
i.__delattr__           i.find                  i.seekable
i.__dict__              i.find_id               i.set
i.__doc__               i.find_object           i.sout
i.__getattribute__      i.get                   i.sout_all
i.__hash__              i.info                  i.sout_audio
i.__init__              i.input_repeat          i.sout_keep
i.__module__            i.input_slave           i.sout_video
i.__new__               i.intf_change           i.spu_channel
i.__reduce__            i.length                i.spu_delay
i.__reduce_ex__         i.list                  i.spu_es
i.__repr__              i.meta_artist           i.start_time
i.__setattr__           i.meta_author           i.state
i.__str__               i.meta_copyright        i.stop_time
i.__weakref__           i.meta_date             i.sub_autodetect_file
i._o                    i.meta_description      i.sub_autodetect_fuzzy
i.audio                 i.meta_genre            i.sub_autodetect_path
i.audio_channel         i.meta_title            i.sub_file
i.audio_delay           i.meta_url              i.time
i.audio_desync          i.minimize_threads      i.time_offset
i.audio_es              i.navigation            i.title
i.bookmark              i.position              i.tree
i.bookmarks             i.position_offset       i.type
i.chapter               i.program               i.video
i.children              i.rate                  i.video_es
i.cr_average            i.rate_faster           

In [10]: i.rate       # Getting variable value
Out[10]: 1000

In [11]: i.rate=500   # Setting variable value

In [12]: mc.display_text('Caption Text', 0, 2000)  
               # Display some text during 2000 ms.
